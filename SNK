import java.awt.*;
import java.awt.event.*;
import javax.swing.*;
import java.util.Random;

public class SnakeGame {
    private final int WIDTH = 400;
    private final int HEIGHT = 400;
    private final int DOT_SIZE = 10;
    private final int ALL_DOTS = 1600;
    private final int RAND_POS = 40;
    private final int DELAY = 140;

    private final int[] x = new int[ALL_DOTS];
    private final int[] y = new int[ALL_DOTS];

    private int dots;
    private int appleX;
    private int appleY;

    private Timer timer;
    private boolean inGame = true;

    public SnakeGame() {
        initGame();
    }

    private void initGame() {
        JFrame frame = new JFrame("Snake Game");
        frame.setDefaultCloseOperation(JFrame.EXIT_ON_CLOSE);
        frame.setSize(WIDTH, HEIGHT);
        frame.setResizable(false);
        frame.setLocationRelativeTo(null);
        frame.add(new GamePanel());

        frame.setVisible(true);
        startGame();
    }

    private void startGame() {
        dots = 3;

        for (int i = 0; i < dots; i++) {
            x[i] = 50 - i * DOT_SIZE;
            y[i] = 50;
        }

        generateApple();

        timer = new Timer(DELAY, new ActionListener() {
            @Override
            public void actionPerformed(ActionEvent e) {
                if (inGame) {
                    move();
                    checkApple();
                    checkCollision();
                } else {
                    timer.stop();
                }
            }
        });

        timer.start();
    }

    private void generateApple() {
        Random rand = new Random();
        appleX = rand.nextInt(RAND_POS) * DOT_SIZE;
        appleY = rand.nextInt(RAND_POS) * DOT_SIZE;
    }

    private void move() {
        for (int i = dots; i > 0; i--) {
            x[i] = x[i - 1];
            y[i] = y[i - 1];
        }

        if (x[0] < 0) {
            x[0] = WIDTH - DOT_SIZE;
        }

        if (x[0] >= WIDTH) {
            x[0] = 0;
        }

        if (y[0] < 0) {
            y[0] = HEIGHT - DOT_SIZE;
        }

        if (y[0] >= HEIGHT) {
            y[0] = 0;
        }

        x[0] += DOT_SIZE;
    }

    private void checkApple() {
        if (x[0] == appleX && y[0] == appleY) {
            dots++;
            generateApple();
        }
    }

    private void checkCollision() {
        for (int i = dots; i > 0; i--) {
            if (i > 4 && x[0] == x[i] && y[0] == y[i]) {
                inGame = false;
            }
        }
    }

    private class GamePanel extends JPanel {
        @Override
        protected void paintComponent(Graphics g) {
            super.paintComponent(g);
            doDrawing(g);
        }

        private void doDrawing(Graphics g) {
            if (inGame) {
                g.setColor(Color.red);
                g.fillOval(appleX, appleY, DOT_SIZE, DOT_SIZE);

                for (int i = 0; i < dots; i++) {
                    if (i == 0) {
                        g.setColor(Color.green);
                    } else {
                        g.setColor(Color.black);
                    }

                    g.fillRect(x[i], y[i], DOT_SIZE, DOT_SIZE);
                }

                Toolkit.getDefaultToolkit().sync();
            } else {
                gameOver(g);
            }
        }

        private void gameOver(Graphics g) {
            String msg = "Game Over";
            Font font = new Font("Helvetica", Font.BOLD, 14);
            FontMetrics metrics = getFontMetrics(font);

            g.setColor(Color.red);
            g.setFont(font);
            g.drawString(msg, (WIDTH - metrics.stringWidth(msg)) / 2, HEIGHT / 2);
        }
    }

    public static void main(String[] args) {
        new SnakeGame();
    }
}
